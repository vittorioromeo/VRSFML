name: CI

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: environment-${{github.ref}}
  cancel-in-progress: true

env:
  DISPLAY: ":99" # Display number to use for the X server
  GALLIUM_DRIVER: llvmpipe # Use Mesa 3D software OpenGL renderer
  ANDROID_NDK_VERSION: "26.1.10909125" # Android NDK version to use
  # Define desired compiler versions for Linux
  GCC_VERSION: 14
  CLANG_VERSION: 20

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
    runs-on: ${{ matrix.platform.os }}

    env:
      CMAKE_CXX_COMPILER_LAUNCHER: ccache # Use ccache to cache C++ compiler output
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: "1" # Work around Homebrew errors within coverallsapp/github-action@v2

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows VS2022 x86,             os: windows-2022, flags: -DSFML_USE_MESA3D=ON -GNinja }
        - { name: Windows VS2022 x64,             os: windows-2022, flags: -DSFML_USE_MESA3D=ON -GNinja }
        - { name: Windows VS2022 arm64,           os: windows-2022, flags: -DSFML_USE_MESA3D=OFF -GNinja -DSFML_BUILD_TEST_SUITE=OFF }
        - { name: Windows VS2022 ClangCL MSBuild, os: windows-2022, flags: -DSFML_USE_MESA3D=ON -T ClangCL } # ninja doesn't support specifying the toolset, so use the ClangCL toolset to test building with MSBuild as well
        - { name: Windows VS2022 OpenGL ES,       os: windows-2022, flags: -DSFML_USE_MESA3D=ON -DSFML_OPENGL_ES=ON -GNinja }
        - { name: Windows VS2022 Unity,           os: windows-2022, flags: -DSFML_USE_MESA3D=ON -DCMAKE_UNITY_BUILD=ON -GNinja }
        - { name: Windows LLVM/Clang,             os: windows-2022, flags: -DSFML_USE_MESA3D=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GNinja }
        - { name: Windows MinGW,                  os: windows-2022, flags: -DSFML_USE_MESA3D=ON -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -GNinja }
        # --- Updated Linux entries ---
        - { name: Linux GCC,                      os: ubuntu-24.04, flags: '-GNinja -DCMAKE_C_COMPILER=gcc-gcc-14 -DCMAKE_CXX_COMPILER=g++-gcc-14' }
        - { name: Linux Clang,                    os: ubuntu-24.04, flags: '-GNinja -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20', gcovr_options: '--gcov-executable="llvm-cov-20 gcov"' }
        - { name: Linux GCC DRM,                  os: ubuntu-24.04, flags: '-DSFML_USE_DRM=ON -DSFML_RUN_DISPLAY_TESTS=OFF -GNinja -DCMAKE_C_COMPILER=gcc-gcc-14 -DCMAKE_CXX_COMPILER=g++-gcc-14' }
        - { name: Linux GCC OpenGL ES,            os: ubuntu-24.04, flags: '-DSFML_OPENGL_ES=ON -DSFML_RUN_DISPLAY_TESTS=OFF -GNinja -DCMAKE_C_COMPILER=gcc-gcc-14 -DCMAKE_CXX_COMPILER=g++-gcc-14' }
        # --- End Updated Linux entries ---
        - { name: macOS x64,                      os: macos-13, flags: -GNinja }
        - { name: macOS x64 Xcode,                os: macos-13, flags: -GXcode }
        - { name: macOS arm64,                    os: macos-15, flags: -GNinja -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF }
        - { name: iOS,                            os: macos-15, flags: -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=arm64 }
        - { name: iOS Xcode,                      os: macos-15, flags: -DCMAKE_SYSTEM_NAME=iOS -GXcode -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO }
        config:
        - { name: Shared, flags: -DBUILD_SHARED_LIBS=ON }
        - { name: Static, flags: -DBUILD_SHARED_LIBS=OFF }
        type:
        - { name: Release, flags: -DSFML_ENABLE_LIFETIME_TRACKING=TRUE }
        - { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug -DSFML_ENABLE_COVERAGE=ON -DSFML_FATAL_OPENGL_ERRORS=ON }

        include:
        - platform: { name: Windows VS2022 x64, os: windows-2022 }
          config: { name: Static with PCH (MSVC), flags: -DSFML_USE_MESA3D=ON -GNinja -DBUILD_SHARED_LIBS=OFF -DSFML_ENABLE_PCH=ON }
        # --- Updated Linux PCH entries ---
        - platform: { name: Linux GCC, os: ubuntu-24.04 }
          config: { name: Static with PCH (GCC), flags: '-GNinja -DCMAKE_C_COMPILER=gcc-gcc-14 -DCMAKE_CXX_COMPILER=g++-gcc-14 -DBUILD_SHARED_LIBS=OFF -DSFML_ENABLE_PCH=ON' }
        - platform: { name: Linux Clang, os: ubuntu-24.04 }
          config: { name: Static with PCH (Clang), flags: '-GNinja -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20 -DBUILD_SHARED_LIBS=OFF -DSFML_ENABLE_PCH=ON' }
        # --- Updated Linux Bundled Deps entries ---
        - platform: { name: Linux GCC, os: ubuntu-24.04 }
          config: { name: Bundled Deps Static, flags: '-GNinja -DCMAKE_C_COMPILER=gcc-gcc-14 -DCMAKE_CXX_COMPILER=g++-gcc-14 -DBUILD_SHARED_LIBS=OFF -DSFML_USE_SYSTEM_DEPS=OFF' }
        - platform: { name: Linux GCC, os: ubuntu-24.04 }
          config: { name: Bundled Deps Shared, flags: '-GNinja -DCMAKE_C_COMPILER=gcc-gcc-14 -DCMAKE_CXX_COMPILER=g++-gcc-14 -DBUILD_SHARED_LIBS=ON -DSFML_USE_SYSTEM_DEPS=OFF' }
        # --- End Updated Linux entries ---
        - platform: { name: Windows MinGW, os: windows-2022 }
          config: { name: Static Standard Libraries, flags: -GNinja -DSFML_USE_MESA3D=ON -DCMAKE_CXX_COMPILER=g++ -DSFML_USE_STATIC_STD_LIBS=ON }
        - platform: { name: Windows MinGW, os: windows-2022 }
          config: { name: Static with PCH (GCC), flags: -GNinja -DSFML_USE_MESA3D=ON -DCMAKE_CXX_COMPILER=g++ -DBUILD_SHARED_LIBS=OFF -DSFML_ENABLE_PCH=ON -DSFML_ENABLE_STDLIB_ASSERTIONS=OFF } # disabling stdlib assertions due to false positive
        - platform: { name: macOS, os: macos-14 }
          config: { name: Frameworks, flags: -GNinja -DSFML_BUILD_FRAMEWORKS=ON -DBUILD_SHARED_LIBS=ON }
        - platform: { name: macOS , os: macos-14 }
          config: { name: System Deps, flags: -GNinja -DBUILD_SHARED_LIBS=ON -DSFML_USE_SYSTEM_DEPS=ON }
        # --- Updated Android entries to use explicit NDK path ---
        - platform: { name: Android, os: ubuntu-24.04 }
          config:
            name: x86 (API 21)
            flags: -GNinja -DCMAKE_ANDROID_ARCH_ABI=x86 -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DBUILD_SHARED_LIBS=ON -DCMAKE_ANDROID_STL_TYPE=c++_shared -DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF
            arch: x86
            api: 21
          type: { name: Release }
        - platform: { name: Android, os: ubuntu-24.04 }
          config:
            name: x86_64 (API 24)
            flags: -GNinja -DCMAKE_ANDROID_ARCH_ABI=x86_64 -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=24 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DBUILD_SHARED_LIBS=ON -DCMAKE_ANDROID_STL_TYPE=c++_shared -DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF
            arch: x86_64
            api: 24
          type: { name: Release }
        - platform: { name: Android, os: ubuntu-24.04 }
          config:
            name: armeabi-v7a (API 29)
            flags: -GNinja -DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=29 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DBUILD_SHARED_LIBS=ON -DCMAKE_ANDROID_STL_TYPE=c++_shared
            arch: armeabi-v7a
            api: 29
          type: { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug -DSFML_FATAL_OPENGL_ERRORS=ON }
        - platform: { name: Android, os: ubuntu-24.04 }
          config:
            name: arm64-v8a (API 33)
            flags: -GNinja -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=33 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DBUILD_SHARED_LIBS=ON -DCMAKE_ANDROID_STL_TYPE=c++_shared -DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF
            arch: arm64-v8a
            api: 33
          type: { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug -DSFML_FATAL_OPENGL_ERRORS=ON }
        # --- End Updated Android entries ---

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up environment variable to disable TLS verification
      run: echo "CMAKE_TLS_VERIFY=0" >> $GITHUB_ENV

    - name: Set Visual Studio Architecture
      if: contains(matrix.platform.name, 'Windows VS') && !contains(matrix.platform.name, 'MSBuild')
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ contains(matrix.platform.name, 'arm64') && 'amd64_arm64' || contains(matrix.platform.name, 'x86') && 'x86' || 'x64' }}

    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latest # Ensure this provides a recent enough version for your needs
        ninjaVersion: latest

    # --- Add step to cache apt downloads ---
    - name: Cache apt packages
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/ci.yml') }} # Re-download if ci.yml changes
        restore-keys: |
          apt-${{ runner.os }}-${{ runner.arch }}-

    # --- Add step to install modern compilers on Linux ---
    - name: Install Modern Compilers (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # Install GCC 14 (should be default on 24.04 but install explicitly)
        sudo apt-get install -y --no-install-recommends gcc-$GCC_VERSION g++-$GCC_VERSION
        # Install LLVM/Clang 20 from official LLVM repo
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh $CLANG_VERSION all # 'all' installs clangd, lld, etc. Adjust if needed.
        rm llvm.sh
        # Verify versions
        gcc-$GCC_VERSION --version
        g++-$GCC_VERSION --version
        clang-$CLANG_VERSION --version
        clang++-$CLANG_VERSION --version

    - name: Install Linux Dependencies and Tools
      if: runner.os == 'Linux'
      run: |
        # Dependencies are now installed after compilers
        sudo apt-get update && sudo apt-get install -y --no-install-recommends \
          xorg-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
          libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev \
          libdrm-dev libgbm-dev xvfb fluxbox ccache gcovr \
          llvm-${CLANG_VERSION}-tools # For llvm-cov

    - name: Remove ALSA Library
      if: runner.os == 'Linux' && matrix.platform.name != 'Android'
      run: sudo apt-get remove -y libasound2 || echo "ALSA already removed or not installed." # Avoid error if not installed

    - name: Install Android Components
      if: matrix.platform.name == 'Android'
      run: |
        echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.2"
        echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "ndk;${ANDROID_NDK_VERSION}"
        # Set ANDROID_NDK_ROOT explicitly for use in matrix flags
        ANDROID_NDK_ROOT_PATH=$(realpath $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION)
        echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT_PATH}" >> $GITHUB_ENV
        echo "Using Android NDK at: ${ANDROID_NDK_ROOT_PATH}"

    - name: Install macOS Tools
      if: runner.os == 'macOS'
      run: |
        # Use retry logic similar to OpenCppCoverage for brew robustness
        for i in 1 2 3; do brew update && brew install gcovr ccache && break || sleep 15; done

    - name: Install macOS System Deps
      if: contains(matrix.config.name, 'System Deps')
      run: |
        for i in 1 2 3; do brew install flac libvorbis && break || sleep 15; done

    - name: Setup CCache
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        verbose: 2
        # Key includes compiler versions for Linux to ensure cache compatibility
        key: ${{ matrix.platform.name }}-${{ matrix.config.name }}-${{ matrix.type.name }}${{ runner.os == 'Linux' && format('-gcc{0}-clang{1}', env.GCC_VERSION, env.CLANG_VERSION) || '' }}

    - name: Install Gcovr for MinGW
      if: matrix.type.name == 'Debug' && contains(matrix.platform.name, 'MinGW')
      uses: threeal/pipx-install-action@v1.0.0
      with:
        packages: gcovr

    - name: Cache OpenCppCoverage
      if: matrix.type.name == 'Debug' && runner.os == 'Windows'
      id: opencppcoverage-cache
      uses: actions/cache@v4
      with:
        path: C:\Program Files\OpenCppCoverage
        key: opencppcoverage-v1 # Added version to key

    - name: Install OpenCppCoverage
      uses: nick-fields/retry@v3
      if: matrix.type.name == 'Debug' && runner.os == 'Windows' && steps.opencppcoverage-cache.outputs.cache-hit != 'true'
      with:
        max_attempts: 10
        timeout_minutes: 3
        command: choco install OpenCppCoverage -y --version 0.9.9.0 # Pin version for stability

    - name: Cache MinGW
      if: matrix.platform.name == 'Windows MinGW'
      id: mingw-cache
      uses: actions/cache@v4
      with:
        path: "C:\\mingw64" # Cache the parent directory to avoid issues with junctions/links if present
        key: winlibs-x86_64-posix-seh-gcc-14.2.0-llvm-19.1.7-mingw-w64msvcrt-12.0.0-r3

    - name: Install MinGW
      if: matrix.platform.name == 'Windows MinGW' && steps.mingw-cache.outputs.cache-hit != 'true'
      run: |
        curl -Lo mingw64.zip https://github.com/brechtsanders/winlibs_mingw/releases/download/14.2.0posix-19.1.7-12.0.0-msvcrt-r3/winlibs-x86_64-posix-seh-gcc-14.2.0-llvm-19.1.7-mingw-w64msvcrt-12.0.0-r3.zip
        # Ensure target directory exists before extracting
        mkdir -p "C:\\mingw64"
        unzip -qq -d "C:\\mingw64" mingw64.zip
        # The zip might contain a nested directory like 'mingw64', move contents up if needed
        if [ -d "C:\\mingw64\\mingw64" ]; then
          echo "Moving MinGW contents up one level..."
          mv C:\\mingw64\\mingw64\\* C:\\mingw64\\
          rmdir C:\\mingw64\\mingw64
        fi

    - name: Add OpenCppCoverage and MinGW to PATH and remove MinGW-supplied CCache
      if: runner.os == 'Windows'
      run: |
        echo "C:\Program Files\OpenCppCoverage" >> $GITHUB_PATH
        # Ensure the MinGW path exists before adding
        if [ -d "C:\\mingw64\\bin" ]; then
          echo "C:\\mingw64\\bin" >> $GITHUB_PATH
          # Remove MinGW ccache only if it exists
          if [ -f "C:\\mingw64\\bin\\ccache.exe" ]; then
            rm -f "C:\\mingw64\\bin\\ccache.exe"
            echo "Removed MinGW ccache.exe"
          fi
        else
            echo "Warning: MinGW directory C:\mingw64\bin not found."
        fi
        echo "Using $(which ccache)"
        ccache --version

    - name: Configure CMake
      run: |
        echo "--- CMake Configuration ---"
        echo "Platform Flags: ${{ matrix.platform.flags }}"
        echo "Config Flags: ${{ matrix.config.flags }}"
        echo "Type Flags: ${{ matrix.type.flags }}"
        echo "Android NDK Root (if applicable): $ANDROID_NDK_ROOT"
        echo "---------------------------"
        # Use bash -eo pipefail to ensure errors in pipes are caught
        bash -eo pipefail << SCRIPT
        cmake --preset vrdev_ci -DCMAKE_TLS_VERIFY=0 -DCMAKE_VERBOSE_MAKEFILE=ON ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${{ matrix.type.flags }}
        SCRIPT

    - name: Build
      run: cmake --build build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --target install --parallel # Add parallel build

    - name: Build Android example
      if: matrix.platform.name == 'Android'
      run: examples/android/gradlew ${{ matrix.type.name == 'Debug' && 'assembleDebug' || 'assembleRelease' }} -p examples/android -P ARCH_ABI=${{matrix.config.arch}} -P MIN_SDK=${{matrix.config.api}}

    - name: Prepare Test
      run: |
        set -e
        # Start up Xvfb and fluxbox to host display tests
        if [ "${{ runner.os }}" == "Linux" ]; then
          Xvfb $DISPLAY -screen 0 1920x1080x24 &
          # Give Xvfb more time to start, especially on potentially slower runners
          sleep 10
          fluxbox > /dev/null 2>&1 &
          # Give fluxbox time to start
          sleep 5
          # Verify X server is running
          xdpyinfo -display $DISPLAY > /dev/null 2>&1 || (echo "X server failed to start"; exit 1)
          echo "Xvfb and fluxbox started."
        fi
        # Make sure the build/bin directory exists so that the find command does not fail if no executables are built
        mkdir -p build/bin
        # Make use of a test to print OpenGL vendor/renderer/version info to the console
        # Need to handle potential errors if find returns nothing or the executable fails
        find "$(echo $GITHUB_WORKSPACE | sed 's/\\\\/\\//g')/build/bin" -name "test-sfml-window*" -print -quit | grep . && \
        find "$(echo $GITHUB_WORKSPACE | sed 's/\\\\/\\//g')/build/bin" -name "test-sfml-window*" -exec sh -c '{} --test-case="[Window] sf::Context" --subcase="Version String" 2>&1 | grep OpenGL || echo "OpenGL info test failed or pattern not found"' \; || \
        echo "Warning: Could not find test-sfml-window executable or failed to get OpenGL info."


    - name: Test (Windows)
      if: runner.os == 'Windows' && !contains(matrix.platform.name, 'MinGW') && !contains(matrix.platform.name, 'arm64')
      run: cmake --build build --target runtests --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }}

    - name: Test (Linux/macOS/MinGW)
      if: (runner.os != 'Windows' || contains(matrix.platform.name, 'MinGW')) && !contains(matrix.platform.name, 'iOS') && !contains(matrix.platform.name, 'Android')
      run: |
        # Set environment for Linux display tests
        if [ "${{ runner.os }}" == "Linux" ]; then
          export DISPLAY=$DISPLAY
          export GALLIUM_DRIVER=$GALLIUM_DRIVER
        fi
        ctest --test-dir build --output-on-failure -C ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --repeat until-pass:3
        # Run gcovr to extract coverage information from the test run
        if [ "${{ matrix.type.name }}" == "Debug" ]; then
          # Need to handle potential differences in gcovr options based on compiler
          GCOVR_CMD="gcovr -r $GITHUB_WORKSPACE -x build/coverage.xml -s --print-summary --xml-pretty -f 'src/SFML/.*' -f 'include/SFML/.*' "
          if [[ "${{ matrix.platform.name }}" == *"Clang"* ]]; then
              GCOVR_CMD+="${{ matrix.platform.gcovr_options }} $GITHUB_WORKSPACE"
          elif [[ "${{ matrix.platform.name }}" == *"GCC"* || "${{ matrix.platform.name }}" == *"MinGW"* ]]; then
              # Assuming standard gcov for GCC/MinGW
               GCOVR_CMD+="--gcov-executable gcov $GITHUB_WORKSPACE"
          else
              # Default for macOS? Assuming standard gcov. Adjust if needed.
              GCOVR_CMD+="--gcov-executable gcov $GITHUB_WORKSPACE"
          fi
          echo "Running gcovr command: $GCOVR_CMD"
          eval $GCOVR_CMD
        fi

    - name: Upload Coverage Report to Coveralls
      if: matrix.type.name == 'Debug' && github.repository == 'SFML/SFML' && !contains(matrix.platform.name, 'iOS') && !contains(matrix.platform.name, 'Android')  && !contains(matrix.platform.name, 'arm64') # Disable upload in forks
      uses: coverallsapp/github-action@v2.3.0 # Use specific version
      with:
        # Use XML format which gcovr produced
        file: ./build/coverage.xml
        format: cobertura # Specify format as Cobertura XML
        flag-name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
        parallel: true
        # allow-empty: true # This might mask actual coverage issues, consider removing or setting to false
        base-path: ${{ github.workspace }}
        # Add token explicitly if needed, though coverallsapp/github-action usually handles it
        # github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Test Install Interface
      if: matrix.platform.name != 'Android'
      run: |
        INSTALL_PREFIX=$GITHUB_WORKSPACE/build/install
        echo "--- Testing Install Interface ---"
        echo "Install Prefix: $INSTALL_PREFIX"
        echo "CMake Args: -S test/install -B test/install/build -DCMAKE_PREFIX_PATH=$INSTALL_PREFIX -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.type.flags}}"
        echo "-------------------------------"
        # Explicitly use bash -eo pipefail for the cmake commands
        bash -eo pipefail << SCRIPT
        cmake -S test/install -B test/install/build -DCMAKE_PREFIX_PATH="$INSTALL_PREFIX" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.type.flags}}
        cmake --build test/install/build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --parallel
        SCRIPT

  # --- Finalize Coverage Job (No changes needed here) ---
  coverage:
    name: Finalize Coverage Upload
    needs: build
    runs-on: ubuntu-24.04
    if: always() && github.repository == 'SFML/SFML' # Disable upload in forks, run always to finalize

    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2.3.0 # Use specific version
      with:
        parallel-finished: true
        # Add token explicitly if needed
        # github-token: ${{ secrets.GITHUB_TOKEN }}

  # --- Tidy Job Updates ---
  tidy:
    name: Analyzing on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows,         os: windows-2022, flags: -GNinja }
        # --- Updated Linux tidy entries ---
        - { name: Linux,           os: ubuntu-24.04, flags: '-DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
        - { name: Linux DRM,       os: ubuntu-24.04, flags: '-DSFML_USE_DRM=ON -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
        - { name: Linux OpenGL ES, os: ubuntu-24.04, flags: '-DSFML_OPENGL_ES=ON -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
        # --- End Updated Linux tidy entries ---
        - { name: macOS,           os: macos-14 } # Using system Clang or Homebrew LLVM
        - { name: iOS,             os: macos-14,     flags: -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=arm64 } # Uses Xcode Clang
        # --- Updated Android tidy entry ---
        - { name: Android,         os: ubuntu-24.04, flags: '-DCMAKE_ANDROID_ARCH_ABI=x86_64 -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DCMAKE_ANDROID_STL_TYPE=c++_shared -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++' } # Uses NDK Clang

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latest
        ninjaVersion: latest

    # --- Add apt cache for Linux ---
    - name: Cache apt packages
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/ci.yml') }}
        restore-keys: |
          apt-${{ runner.os }}-${{ runner.arch }}-

    # --- Add Clang 20 install for Linux ---
    - name: Install Clang Compiler (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh $CLANG_VERSION clang clang-tidy # Only install clang and clang-tidy
        rm llvm.sh
        # Verify versions
        clang-$CLANG_VERSION --version
        clang-tidy-$CLANG_VERSION --version
        # Set path for CMake find_program(clang-tidy) if needed, or rely on CMAKE_CXX_COMPILER
        echo "CLANG_TIDY_EXE=$(which clang-tidy-${CLANG_VERSION})" >> $GITHUB_ENV

    - name: Install Windows Dependencies
      if: runner.os == 'Windows'
      run: |
        # Ensure LLVM is installed via choco or comes with VS
        choco install llvm --version 18.1.8 # Example: Install LLVM 18 for tidy on Windows
        echo "C:\Program Files\LLVM\bin" >> $GITHUB_PATH
        curl.exe -o run-clang-tidy.py https://raw.githubusercontent.com/llvm/llvm-project/main/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
         sudo apt-get update && sudo apt-get install -y --no-install-recommends \
           libfreetype-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
           libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev \
           libdrm-dev libgbm-dev python3 # run-clang-tidy might need python

    - name: Install macOS Dependencies
      if: runner.os == 'macOS'
      run: |
        # Retry logic for brew
        for i in 1 2 3; do brew update && brew install llvm && break || sleep 15; done # Install latest stable LLVM from brew
        echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
        # Verify clang-tidy path
        which clang-tidy

    # --- Update Android NDK setup for tidy ---
    - name: Set Android NDK Root for Tidy
      if: matrix.platform.name == 'Android'
      run: |
        # Need NDK for its Clang toolchain
        echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "ndk;${ANDROID_NDK_VERSION}"
        ANDROID_NDK_ROOT_PATH=$(realpath $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION)
        echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT_PATH}" >> $GITHUB_ENV
        echo "Using Android NDK at: ${ANDROID_NDK_ROOT_PATH} for Tidy"

    - name: Configure
      run: |
        echo "--- Tidy CMake Configuration ---"
        echo "Platform Flags: ${{ matrix.platform.flags }}"
        echo "Android NDK Root (if applicable): $ANDROID_NDK_ROOT"
        echo "Using clang-tidy: $(which clang-tidy || echo 'Not found in PATH, relying on CMake finding it via CXX compiler')"
        echo "--------------------------------"
        # Ensure the correct clang++ is used, which helps find the matching clang-tidy
        # For Windows, rely on LLVM install setting path or VS providing it.
        # For Linux, use explicit path.
        # For macOS, rely on brew install setting path.
        # For Android, rely on NDK toolchain file.
        CMAKE_EXTRA_ARGS=""
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Point to the specific clang-tidy version
          CMAKE_EXTRA_ARGS="-DCMAKE_CXX_CLANG_TIDY=$(which clang-tidy-${CLANG_VERSION})"
        fi
        bash -eo pipefail << SCRIPT
        cmake --preset vrdev_ci -DCMAKE_TLS_VERIFY=0 \
          ${{ runner.os != 'Windows' && '-DCMAKE_C_COMPILER=clang' }} \
          ${{ runner.os != 'Windows' && '-DCMAKE_CXX_COMPILER=clang++' }} \
          ${{ runner.os == 'Linux' && format('-DCMAKE_C_COMPILER=clang-{0} -DCMAKE_CXX_COMPILER=clang++-{0}', env.CLANG_VERSION) || ''}} \
          -DCMAKE_UNITY_BUILD=ON \
          ${{ matrix.platform.flags }} \
          $CMAKE_EXTRA_ARGS
        SCRIPT


    - name: Analyze Code
      run: cmake --build build --target tidy

  # --- Sanitize Job Updates ---
  sanitize:
    name: Sanitizing on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        # --- Updated Linux sanitize entries ---
        - { name: Linux,               os: ubuntu-24.04, flags: '-DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
        - { name: Linux DRM,           os: ubuntu-24.04, flags: '-DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_USE_DRM=ON -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
        - { name: Linux GCC OpenGL ES, os: ubuntu-24.04, flags: '-DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_OPENGL_ES=ON -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' } # Renamed as Clang is used
        # --- End Updated Linux sanitize entries ---

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latest
        ninjaVersion: latest

    # --- Add apt cache ---
    - name: Cache apt packages
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/ci.yml') }}
        restore-keys: |
          apt-${{ runner.os }}-${{ runner.arch }}-

    # --- Add Clang 20 install ---
    - name: Install Clang Compiler (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh $CLANG_VERSION all # Install full LLVM suite for sanitizers
        rm llvm.sh
        # Verify versions
        clang-$CLANG_VERSION --version
        clang++-$CLANG_VERSION --version

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
         sudo apt-get update && sudo apt-get install -y --no-install-recommends \
           xorg-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
           libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev \
           libdrm-dev libgbm-dev xvfb fluxbox && \
           (sudo apt-get remove -y libasound2 || echo "ALSA already removed or not installed.")


    - name: Configure
      run: |
        echo "--- Sanitize CMake Configuration ---"
        echo "Platform Flags: ${{ matrix.platform.flags }}"
        echo "------------------------------------"
        bash -eo pipefail << SCRIPT
        cmake --preset vrdev_ci -GNinja -DCMAKE_BUILD_TYPE=Debug \
          -DSFML_BUILD_EXAMPLES=OFF -DSFML_ENABLE_SANITIZERS=ON \
          ${{ matrix.platform.flags }}
        SCRIPT

    - name: Build
      run: cmake --build build --parallel

    - name: Prepare Test
      run: |
        set -e
        # Start up Xvfb and fluxbox to host display tests
        if [ "${{ runner.os }}" == "Linux" ]; then
          Xvfb $DISPLAY -screen 0 1920x1080x24 &
          sleep 10 # More time for Xvfb
          fluxbox > /dev/null 2>&1 &
          sleep 5 # Time for fluxbox
          xdpyinfo -display $DISPLAY > /dev/null 2>&1 || (echo "X server failed to start"; exit 1)
          echo "Xvfb and fluxbox started for sanitize tests."
        fi

    - name: Test
      run: |
        # Set environment for Linux display tests and sanitizers
        if [ "${{ runner.os }}" == "Linux" ]; then
          export DISPLAY=$DISPLAY
          export GALLIUM_DRIVER=$GALLIUM_DRIVER
          # Set sanitizer options if needed, e.g., to exit on error
          export ASAN_OPTIONS=halt_on_error=1
          export UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1
          export LSAN_OPTIONS=halt_on_error=1
        fi
        ctest --test-dir build --output-on-failure -C Debug # Sanitizers usually need Debug build type

  # --- Docs Job (No changes needed here unless Doxygen depends on specific Clang for parsing) ---
  docs:
    name: Documentation
    runs-on: macos-14

    steps:
    - name: Install Doxygen
      run: |
        # Retry logic for brew
        for i in 1 2 3; do brew update && brew install doxygen && break || sleep 15; done

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure
      run: cmake -B build -DSFML_BUILD_DOC=ON -DSFML_BUILD_WINDOW=OFF -DSFML_BUILD_GRAPHICS=OFF -DSFML_BUILD_AUDIO=OFF -DSFML_BUILD_NETWORK=OFF

    - name: Build Doxygen Site
      run: cmake --build build --target doc
