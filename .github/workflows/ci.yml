name: CI

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: environment-${{github.ref}}
  cancel-in-progress: true

env:
  # DISPLAY: ":99" # No longer needed globally, xvfb-run handles it
  GALLIUM_DRIVER: llvmpipe # Use Mesa 3D software OpenGL renderer
  ANDROID_NDK_VERSION: "26.1.10909125" # Android NDK version to use
  # Define desired compiler versions for Linux
  GCC_VERSION: 14
  CLANG_VERSION: 20

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
    runs-on: ${{ matrix.platform.os }}

    env:
      CMAKE_CXX_COMPILER_LAUNCHER: ccache # Use ccache to cache C++ compiler output
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: "1" # Work around Homebrew errors

    strategy:
      fail-fast: false
      matrix:
        platform:
        # - { name: Windows VS2022 x86,             os: windows-2022, flags: -DSFML_USE_MESA3D=ON -G"Visual Studio 17 2022" }
        # - { name: Windows VS2022 x64,             os: windows-2022, flags: -DSFML_USE_MESA3D=ON -G"Visual Studio 17 2022" }
        # - { name: Windows VS2022 arm64,           os: windows-2022, flags: -DSFML_USE_MESA3D=OFF -G"Visual Studio 17 2022" -DSFML_BUILD_TEST_SUITE=OFF }
        # - { name: Windows VS2022 ClangCL MSBuild, os: windows-2022, flags: -DSFML_USE_MESA3D=ON -T ClangCL }
        # - { name: Windows VS2022 OpenGL ES,       os: windows-2022, flags: -DSFML_USE_MESA3D=ON -DSFML_OPENGL_ES=ON -G"Visual Studio 17 2022" }
        # - { name: Windows VS2022 Unity,           os: windows-2022, flags: -DSFML_USE_MESA3D=ON -DCMAKE_UNITY_BUILD=ON -G"Visual Studio 17 2022" }
        # - { name: Windows LLVM/Clang,             os: windows-2022, flags: -DSFML_USE_MESA3D=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -GNinja }
        # - { name: Windows MinGW,                  os: windows-2022, flags: -DSFML_USE_MESA3D=ON -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -GNinja }
        # --- Updated Linux entries ---
        - { name: Linux GCC,                      os: ubuntu-24.04, flags: '-GNinja -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14' }
        - { name: Linux Clang,                    os: ubuntu-24.04, flags: '-GNinja -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' } # Removed gcovr_options
        # - { name: Linux GCC DRM,                  os: ubuntu-24.04, flags: '-DSFML_USE_DRM=ON -DSFML_RUN_DISPLAY_TESTS=OFF -GNinja -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14' }
        - { name: Linux GCC OpenGL ES,            os: ubuntu-24.04, flags: '-DSFML_OPENGL_ES=ON -DSFML_RUN_DISPLAY_TESTS=OFF -GNinja -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14' }
        # --- End Updated Linux entries ---
        # - { name: macOS x64,                      os: macos-13, flags: -GNinja }
        # - { name: macOS x64 Xcode,                os: macos-13, flags: -GXcode }
        # - { name: macOS arm64,                    os: macos-15, flags: -GNinja -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF }
        # - { name: iOS,                            os: macos-15, flags: -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=arm64 }
        # - { name: iOS Xcode,                      os: macos-15, flags: -DCMAKE_SYSTEM_NAME=iOS -GXcode -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO }
        config:
        # - { name: Shared, flags: -DBUILD_SHARED_LIBS=ON }
        - { name: Static, flags: -DBUILD_SHARED_LIBS=OFF }
        type:
        - { name: Release, flags: -DSFML_ENABLE_LIFETIME_TRACKING=TRUE }
        # --- Updated Debug type (removed coverage flag) ---
        - { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug -DSFML_FATAL_OPENGL_ERRORS=ON }

        include:
        - platform: { name: Windows VS2022 x64, os: windows-2022 }
          config: { name: Static with PCH (MSVC), flags: -DSFML_USE_MESA3D=ON -G"Visual Studio 17 2022" -DBUILD_SHARED_LIBS=OFF -DSFML_ENABLE_PCH=ON }
        # --- Updated Linux PCH entries ---
        - platform: { name: Linux GCC, os: ubuntu-24.04 }
          config: { name: Static with PCH (GCC), flags: '-GNinja -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14 -DBUILD_SHARED_LIBS=OFF -DSFML_ENABLE_PCH=ON' }
        - platform: { name: Linux Clang, os: ubuntu-24.04 }
          config: { name: Static with PCH (Clang), flags: '-GNinja -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20 -DBUILD_SHARED_LIBS=OFF -DSFML_ENABLE_PCH=ON' }
        # --- Updated Linux Bundled Deps entries ---
        - platform: { name: Linux GCC, os: ubuntu-24.04 }
          config: { name: Bundled Deps Static, flags: '-GNinja -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14 -DBUILD_SHARED_LIBS=OFF -DSFML_USE_SYSTEM_DEPS=OFF' }
        - platform: { name: Linux GCC, os: ubuntu-24.04 }
          config: { name: Bundled Deps Shared, flags: '-GNinja -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14 -DBUILD_SHARED_LIBS=ON -DSFML_USE_SYSTEM_DEPS=OFF' }
        # --- End Updated Linux entries ---
        - platform: { name: Windows MinGW, os: windows-2022 }
          config: { name: Static Standard Libraries, flags: -GNinja -DSFML_USE_MESA3D=ON -DCMAKE_CXX_COMPILER=g++ -DSFML_USE_STATIC_STD_LIBS=ON }
        - platform: { name: Windows MinGW, os: windows-2022 }
          config: { name: Static with PCH (GCC), flags: -GNinja -DSFML_USE_MESA3D=ON -DCMAKE_CXX_COMPILER=g++ -DBUILD_SHARED_LIBS=OFF -DSFML_ENABLE_PCH=ON -DSFML_ENABLE_STDLIB_ASSERTIONS=OFF } # disabling stdlib assertions due to false positive
        # - platform: { name: macOS, os: macos-14 }
        #   config: { name: Frameworks, flags: -GNinja -DSFML_BUILD_FRAMEWORKS=ON -DBUILD_SHARED_LIBS=ON }
        # - platform: { name: macOS , os: macos-14 }
        #   config: { name: System Deps, flags: -GNinja -DBUILD_SHARED_LIBS=ON -DSFML_USE_SYSTEM_DEPS=ON }
        # --- Updated Android entries to use explicit NDK path ---
        # - platform: { name: Android, os: ubuntu-24.04 }
        #   config:
        #     name: x86 (API 21)
        #     flags: -GNinja -DCMAKE_ANDROID_ARCH_ABI=x86 -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DBUILD_SHARED_LIBS=ON -DCMAKE_ANDROID_STL_TYPE=c++_shared -DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF
        #     arch: x86
        #     api: 21
        #   type: { name: Release }
        # - platform: { name: Android, os: ubuntu-24.04 }
        #   config:
        #     name: x86_64 (API 24)
        #     flags: -GNinja -DCMAKE_ANDROID_ARCH_ABI=x86_64 -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=24 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DBUILD_SHARED_LIBS=ON -DCMAKE_ANDROID_STL_TYPE=c++_shared -DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF
        #     arch: x86_64
        #     api: 24
        #   type: { name: Release }
        # - platform: { name: Android, os: ubuntu-24.04 }
        #   config:
        #     name: armeabi-v7a (API 29)
        #     flags: -GNinja -DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=29 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DBUILD_SHARED_LIBS=ON -DCMAKE_ANDROID_STL_TYPE=c++_shared
        #     arch: armeabi-v7a
        #     api: 29
        #   type: { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug -DSFML_FATAL_OPENGL_ERRORS=ON }
        # - platform: { name: Android, os: ubuntu-24.04 }
        #   config:
        #     name: arm64-v8a (API 33)
        #     flags: -GNinja -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=33 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DBUILD_SHARED_LIBS=ON -DCMAKE_ANDROID_STL_TYPE=c++_shared -DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_RUN_AUDIO_DEVICE_TESTS=OFF
        #     arch: arm64-v8a
        #     api: 33
        #   type: { name: Debug, flags: -DCMAKE_BUILD_TYPE=Debug -DSFML_FATAL_OPENGL_ERRORS=ON }
        # --- End Updated Android entries ---

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up environment variable to disable TLS verification
      run: echo "CMAKE_TLS_VERIFY=0" >> $GITHUB_ENV

    - name: Set Visual Studio Architecture
      if: contains(matrix.platform.name, 'Windows VS') && !contains(matrix.platform.name, 'MSBuild')
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ contains(matrix.platform.name, 'arm64') && 'amd64_arm64' || contains(matrix.platform.name, 'x86') && 'x86' || 'x64' }}

    - name: Get CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latest
        ninjaVersion: latest

    # --- Add step to cache apt downloads ---
    - name: Cache apt packages
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/ci.yml') }}
        restore-keys: |
          apt-${{ runner.os }}-${{ runner.arch }}-

    # --- Add step to install modern compilers on Linux ---
    - name: Install Modern Compilers (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # Install GCC 14
        sudo apt-get install -y --no-install-recommends gcc-$GCC_VERSION g++-$GCC_VERSION
        # Install LLVM/Clang 20
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh $CLANG_VERSION all # Keep 'all' for clang-tidy, sanitizers etc.
        rm llvm.sh
        # Verify versions
        gcc-$GCC_VERSION --version
        g++-$GCC_VERSION --version
        clang-$CLANG_VERSION --version
        clang++-$CLANG_VERSION --version

    # --- Updated Linux Dependencies (Removed gcovr, llvm-tools, fluxbox) ---
    - name: Install Linux Dependencies and Tools
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update && sudo apt-get install -y --no-install-recommends \
          xorg-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
          libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev \
          libdrm-dev libgbm-dev \
          xvfb ccache # Need xvfb for xvfb-run

    - name: Remove ALSA Library
      if: runner.os == 'Linux' && matrix.platform.name != 'Android'
      run: sudo apt-get remove -y libasound2 || echo "ALSA already removed or not installed."

    - name: Install Android Components
      if: matrix.platform.name == 'Android'
      run: |
        echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.2"
        echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "ndk;${ANDROID_NDK_VERSION}"
        ANDROID_NDK_ROOT_PATH=$(realpath $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION)
        echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT_PATH}" >> $GITHUB_ENV
        echo "Using Android NDK at: ${ANDROID_NDK_ROOT_PATH}"

    # --- Updated macOS Tools (Removed gcovr) ---
    - name: Install macOS Tools
      if: runner.os == 'macOS'
      run: |
        for i in 1 2 3; do brew update && brew install ccache && break || sleep 15; done

    - name: Install macOS System Deps
      if: contains(matrix.config.name, 'System Deps')
      run: |
        for i in 1 2 3; do brew install flac libvorbis && break || sleep 15; done

    - name: Setup CCache
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        verbose: 2
        key: ${{ matrix.platform.name }}-${{ matrix.config.name }}-${{ matrix.type.name }}${{ runner.os == 'Linux' && format('-gcc{0}-clang{1}', env.GCC_VERSION, env.CLANG_VERSION) || '' }}

    - name: Cache MinGW
      if: matrix.platform.name == 'Windows MinGW'
      id: mingw-cache
      uses: actions/cache@v4
      with:
        path: "C:\\mingw64"
        key: winlibs-x86_64-posix-seh-gcc-14.2.0-llvm-19.1.7-mingw-w64msvcrt-12.0.0-r3

    - name: Install MinGW
      if: matrix.platform.name == 'Windows MinGW' && steps.mingw-cache.outputs.cache-hit != 'true'
      run: |
        curl -Lo mingw64.zip https://github.com/brechtsanders/winlibs_mingw/releases/download/14.2.0posix-19.1.7-12.0.0-msvcrt-r3/winlibs-x86_64-posix-seh-gcc-14.2.0-llvm-19.1.7-mingw-w64msvcrt-12.0.0-r3.zip
        mkdir -p "C:\\mingw64"
        unzip -qq -d "C:\\mingw64" mingw64.zip
        if [ -d "C:\\mingw64\\mingw64" ]; then
          echo "Moving MinGW contents up one level..."
          mv C:\\mingw64\\mingw64\\* C:\\mingw64\\
          rmdir C:\\mingw64\\mingw64
        fi

    # --- Updated PATH setup (Removed OpenCppCoverage) ---
    - name: Add MinGW to PATH and remove MinGW-supplied CCache
      if: runner.os == 'Windows' && matrix.platform.name == 'Windows MinGW'
      run: |
        if [ -d "C:\\mingw64\\bin" ]; then
          echo "C:\\mingw64\\bin" >> $GITHUB_PATH
          if [ -f "C:\\mingw64\\bin\\ccache.exe" ]; then
            rm -f "C:\\mingw64\\bin\\ccache.exe"
            echo "Removed MinGW ccache.exe"
          fi
        else
            echo "Warning: MinGW directory C:\mingw64\bin not found."
        fi
        echo "Using $(which ccache)"
        ccache --version

    - name: Configure CMake
      run: |
        echo "--- CMake Configuration ---"
        echo "Platform Flags: ${{ matrix.platform.flags }}"
        echo "Config Flags: ${{ matrix.config.flags }}"
        echo "Type Flags: ${{ matrix.type.flags }}"
        echo "Android NDK Root (if applicable): $ANDROID_NDK_ROOT"
        echo "---------------------------"
        bash -eo pipefail << SCRIPT
        cmake --preset vrdev_ci -DCMAKE_TLS_VERIFY=0 -DCMAKE_VERBOSE_MAKEFILE=ON ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${{ matrix.type.flags }}
        SCRIPT

    - name: Build
      run: cmake --build build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --target install --parallel

    - name: Build Android example
      if: matrix.platform.name == 'Android'
      run: examples/android/gradlew ${{ matrix.type.name == 'Debug' && 'assembleDebug' || 'assembleRelease' }} -p examples/android -P ARCH_ABI=${{matrix.config.arch}} -P MIN_SDK=${{matrix.config.api}}

    # --- Updated Prepare Test step (Removed Xvfb/Fluxbox/GL Check) ---
    - name: Prepare Test Environment
      run: |
        set -e
        echo "Ensuring build directories exist..."
        mkdir -p build/bin build/lib
        echo "Prepare Test Environment step finished."

    - name: Test (Windows)
      if: runner.os == 'Windows' && !contains(matrix.platform.name, 'MinGW') && !contains(matrix.platform.name, 'arm64')
      run: cmake --build build --target runtests --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }}

    # --- Updated Test Step (Using xvfb-run for Linux) ---
    - name: Test (Linux/macOS/MinGW)
      if: (runner.os != 'Windows' || contains(matrix.platform.name, 'MinGW')) && !contains(matrix.platform.name, 'iOS') && !contains(matrix.platform.name, 'Android')
      run: |
        # Set environment vars needed by tests
        export GALLIUM_DRIVER=$GALLIUM_DRIVER

        # Define the core test command
        TEST_CMD="ctest --test-dir build --output-on-failure -C ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --repeat until-pass:3"

        # Prepare OpenGL info check command (to be run within X env if applicable)
        GET_GL_INFO_CMD=""
        TEST_EXEC=$(find "$(echo $GITHUB_WORKSPACE | sed 's/\\\\/\\//g')/build/bin" -name "test-sfml-window*" -print -quit)
        if [ -n "$TEST_EXEC" ]; then
          GET_GL_INFO_CMD="echo '--- Getting OpenGL Info ---'; '$TEST_EXEC' --test-case='[Window] sf::Context' --subcase='Version String' 2>&1 | grep -Ei '(OpenGL|Vendor|Renderer|Version)' || echo 'Warning: Failed to get OpenGL info.' ; echo '--- OpenGL Info End ---'"
        else
          GET_GL_INFO_CMD="echo 'Warning: test-sfml-window executable not found.'"
        fi

        # Execute tests: Use xvfb-run wrapper only on Linux
        if [ "${{ runner.os }}" == "Linux" ]; then
          echo "Running tests within xvfb-run on Linux..."
          xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" \
            sh -c "
              set -eo pipefail # Ensure errors fail the script
              echo 'Inside xvfb-run environment. Display is: \$DISPLAY'
              $GET_GL_INFO_CMD
              echo '--- Running CTest ---'
              $TEST_CMD
              echo '--- CTest Finished ---'
            "
          XVFB_RUN_EXIT_CODE=$?
          echo "xvfb-run finished with exit code $XVFB_RUN_EXIT_CODE"
          exit $XVFB_RUN_EXIT_CODE
        else
          echo "Running tests directly (macOS/MinGW)..."
          sh -c "$GET_GL_INFO_CMD" # Run GL info check directly
          $TEST_CMD # Run ctest directly
        fi
      env:
         # Allow xvfb-run to set DISPLAY on Linux
         DISPLAY: ""

    - name: Test Install Interface
      if: matrix.platform.name != 'Android'
      run: |
        INSTALL_PREFIX=$GITHUB_WORKSPACE/build/install
        echo "--- Testing Install Interface ---"
        echo "Install Prefix: $INSTALL_PREFIX"
        echo "CMake Args: -S test/install -B test/install/build -DCMAKE_PREFIX_PATH=$INSTALL_PREFIX -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.type.flags}}"
        echo "-------------------------------"
        bash -eo pipefail << SCRIPT
        cmake -S test/install -B test/install/build -DCMAKE_PREFIX_PATH="$INSTALL_PREFIX" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.type.flags}}
        cmake --build test/install/build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --parallel
        SCRIPT

  # # --- Tidy Job (No changes related to xvfb-run needed) ---
  # tidy:
  #   name: Analyzing on ${{ matrix.platform.name }}
  #   runs-on: ${{ matrix.platform.os }}

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform:
  #       - { name: Windows,         os: windows-2022, flags: -GNinja }
  #       # --- Updated Linux tidy entries ---
  #       - { name: Linux,           os: ubuntu-24.04, flags: '-DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
  #       - { name: Linux DRM,       os: ubuntu-24.04, flags: '-DSFML_USE_DRM=ON -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
  #       - { name: Linux OpenGL ES, os: ubuntu-24.04, flags: '-DSFML_OPENGL_ES=ON -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
  #       # --- End Updated Linux tidy entries ---
  #       - { name: macOS,           os: macos-14 }
  #       - { name: iOS,             os: macos-14,     flags: -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=arm64 }
  #       - { name: Android,         os: ubuntu-24.04, flags: '-DCMAKE_ANDROID_ARCH_ABI=x86_64 -DCMAKE_SYSTEM_NAME=Android -DCMAKE_SYSTEM_VERSION=21 -DCMAKE_ANDROID_NDK=$ANDROID_NDK_ROOT -DCMAKE_ANDROID_STL_TYPE=c++_shared -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++' }

  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v4

  #   - name: Get CMake and Ninja
  #     uses: lukka/get-cmake@latest
  #     with:
  #       cmakeVersion: latest
  #       ninjaVersion: latest

  #   - name: Cache apt packages
  #     if: runner.os == 'Linux'
  #     uses: actions/cache@v4
  #     with:
  #       path: /var/cache/apt/archives
  #       key: apt-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/ci.yml') }}
  #       restore-keys: |
  #         apt-${{ runner.os }}-${{ runner.arch }}-

  #   - name: Install Clang Compiler (Linux)
  #     if: runner.os == 'Linux'
  #     run: |
  #       sudo apt-get update
  #       wget https://apt.llvm.org/llvm.sh
  #       chmod +x llvm.sh
  #       sudo ./llvm.sh $CLANG_VERSION clang clang-tidy
  #       rm llvm.sh
  #       clang-$CLANG_VERSION --version
  #       clang-tidy-$CLANG_VERSION --version
  #       echo "CLANG_TIDY_EXE=$(which clang-tidy-${CLANG_VERSION})" >> $GITHUB_ENV

  #   - name: Install Windows Dependencies
  #     if: runner.os == 'Windows'
  #     run: |
  #       choco install llvm --version 18.1.8 # Pin version
  #       echo "C:\Program Files\LLVM\bin" >> $GITHUB_PATH
  #       curl.exe -o run-clang-tidy.py https://raw.githubusercontent.com/llvm/llvm-project/main/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py

  #   - name: Install Linux Dependencies
  #     if: runner.os == 'Linux'
  #     run: |
  #        sudo apt-get update && sudo apt-get install -y --no-install-recommends \
  #          libfreetype-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
  #          libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev \
  #          libdrm-dev libgbm-dev python3

  #   - name: Install macOS Dependencies
  #     if: runner.os == 'macOS'
  #     run: |
  #       for i in 1 2 3; do brew update && brew install llvm && break || sleep 15; done
  #       echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
  #       which clang-tidy

  #   - name: Set Android NDK Root for Tidy
  #     if: matrix.platform.name == 'Android'
  #     run: |
  #       echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "ndk;${ANDROID_NDK_VERSION}"
  #       ANDROID_NDK_ROOT_PATH=$(realpath $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION)
  #       echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT_PATH}" >> $GITHUB_ENV
  #       echo "Using Android NDK at: ${ANDROID_NDK_ROOT_PATH} for Tidy"

  #   - name: Configure
  #     run: |
  #       echo "--- Tidy CMake Configuration ---"
  #       echo "Platform Flags: ${{ matrix.platform.flags }}"
  #       echo "Android NDK Root (if applicable): $ANDROID_NDK_ROOT"
  #       echo "Using clang-tidy: $(which clang-tidy || which clang-tidy-${{ env.CLANG_VERSION }} || echo 'Not found')"
  #       echo "--------------------------------"
  #       CMAKE_EXTRA_ARGS=""
  #       if [ "$RUNNER_OS" == "Linux" ]; then
  #          CMAKE_EXTRA_ARGS="-DCMAKE_CXX_CLANG_TIDY=$(which clang-tidy-${CLANG_VERSION})"
  #       elif [ "$RUNNER_OS" == "macOS" ]; then
  #          CMAKE_EXTRA_ARGS="-DCMAKE_CXX_CLANG_TIDY=$(which clang-tidy)"
  #       elif [ "$RUNNER_OS" == "Windows" ]; then
  #          CLANG_TIDY_PATH=$(where.exe clang-tidy.exe | head -n 1)
  #          if [ -n "$CLANG_TIDY_PATH" ]; then
  #            CMAKE_EXTRA_ARGS="-DCMAKE_CXX_CLANG_TIDY=$CLANG_TIDY_PATH"
  #          fi
  #       fi
  #       bash -eo pipefail << SCRIPT
  #       cmake --preset vrdev_ci -DCMAKE_TLS_VERIFY=0 \
  #         ${{ runner.os != 'Windows' && matrix.platform.name != 'Android' && '-DCMAKE_C_COMPILER=clang' }} \
  #         ${{ runner.os != 'Windows' && matrix.platform.name != 'Android' && '-DCMAKE_CXX_COMPILER=clang++' }} \
  #         ${{ runner.os == 'Linux' && format('-DCMAKE_C_COMPILER=clang-{0} -DCMAKE_CXX_COMPILER=clang++-{0}', env.CLANG_VERSION) || ''}} \
  #         -DCMAKE_UNITY_BUILD=ON \
  #         ${{ matrix.platform.flags }} \
  #         $CMAKE_EXTRA_ARGS
  #       SCRIPT

  #   - name: Analyze Code
  #     run: cmake --build build --target tidy

  # # --- Sanitize Job Updates ---
  # sanitize:
  #   name: Sanitizing on ${{ matrix.platform.name }}
  #   runs-on: ${{ matrix.platform.os }}

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform:
  #       # --- Updated Linux sanitize entries ---
  #       - { name: Linux,               os: ubuntu-24.04, flags: '-DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
  #       - { name: Linux DRM,           os: ubuntu-24.04, flags: '-DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_USE_DRM=ON -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' }
  #       - { name: Linux Clang OpenGL ES, os: ubuntu-24.04, flags: '-DSFML_RUN_DISPLAY_TESTS=OFF -DSFML_OPENGL_ES=ON -DCMAKE_C_COMPILER=clang-20 -DCMAKE_CXX_COMPILER=clang++-20' } # Renamed job slightly
  #       # --- End Updated Linux sanitize entries ---

  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v4

  #   - name: Get CMake and Ninja
  #     uses: lukka/get-cmake@latest
  #     with:
  #       cmakeVersion: latest
  #       ninjaVersion: latest

  #   - name: Cache apt packages
  #     if: runner.os == 'Linux'
  #     uses: actions/cache@v4
  #     with:
  #       path: /var/cache/apt/archives
  #       key: apt-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/ci.yml') }}
  #       restore-keys: |
  #         apt-${{ runner.os }}-${{ runner.arch }}-

  #   - name: Install Clang Compiler (Linux)
  #     if: runner.os == 'Linux'
  #     run: |
  #       sudo apt-get update
  #       wget https://apt.llvm.org/llvm.sh
  #       chmod +x llvm.sh
  #       sudo ./llvm.sh $CLANG_VERSION all
  #       rm llvm.sh
  #       clang-$CLANG_VERSION --version
  #       clang++-$CLANG_VERSION --version

  #   # --- Updated Linux Dependencies (Removed fluxbox) ---
  #   - name: Install Linux Dependencies
  #     if: runner.os == 'Linux'
  #     run: |
  #        sudo apt-get update && sudo apt-get install -y --no-install-recommends \
  #          xorg-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
  #          libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev \
  #          libdrm-dev libgbm-dev xvfb && \
  #          (sudo apt-get remove -y libasound2 || echo "ALSA already removed or not installed.")

  #   - name: Configure
  #     run: |
  #       echo "--- Sanitize CMake Configuration ---"
  #       echo "Platform Flags: ${{ matrix.platform.flags }}"
  #       echo "------------------------------------"
  #       bash -eo pipefail << SCRIPT
  #       cmake --preset vrdev_ci -GNinja -DCMAKE_BUILD_TYPE=Debug \
  #         -DSFML_BUILD_EXAMPLES=OFF -DSFML_ENABLE_SANITIZERS=ON \
  #         ${{ matrix.platform.flags }}
  #       SCRIPT

  #   - name: Build
  #     run: cmake --build build --parallel

  #   # --- Updated Prepare Test Step (Removed Xvfb/Fluxbox) ---
  #   - name: Prepare Sanitize Test Environment
  #     run: |
  #       set -e
  #       echo "Ensuring build directories exist..."
  #       mkdir -p build/bin build/lib
  #       echo "Prepare Sanitize Test Environment step finished."

  #   # --- Updated Test Step (Using xvfb-run) ---
  #   - name: Test with Sanitizers
  #     run: |
  #       # Set environment vars
  #       export GALLIUM_DRIVER=$GALLIUM_DRIVER
  #       export ASAN_OPTIONS=halt_on_error=1:detect_leaks=1
  #       export UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1
  #       export LSAN_OPTIONS=halt_on_error=1

  #       # Define the core test command
  #       TEST_CMD="ctest --test-dir build --output-on-failure -C Debug"

  #       # Execute tests: Use xvfb-run wrapper only on Linux
  #       if [ "${{ runner.os }}" == "Linux" ]; then
  #         echo "Running sanitizer tests within xvfb-run on Linux..."
  #         xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" \
  #           sh -c "
  #             set -eo pipefail # Ensure errors fail the script
  #             echo 'Inside xvfb-run environment. Display is: \$DISPLAY'
  #             echo '--- Running CTest (Sanitizers Enabled) ---'
  #             $TEST_CMD
  #             echo '--- CTest Finished ---'
  #           "
  #         XVFB_RUN_EXIT_CODE=$?
  #         echo "xvfb-run finished with exit code $XVFB_RUN_EXIT_CODE"
  #         exit $XVFB_RUN_EXIT_CODE
  #       else
  #         echo "Sanitizer tests are configured only for Linux in this workflow."
  #       fi
  #     env:
  #        # Allow xvfb-run to set DISPLAY on Linux
  #        DISPLAY: ""

  # # --- Docs Job (No changes needed) ---
  # docs:
  #   name: Documentation
  #   runs-on: macos-14

  #   steps:
  #   - name: Install Doxygen
  #     run: |
  #       for i in 1 2 3; do brew update && brew install doxygen && break || sleep 15; done

  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure
  #     run: cmake -B build -DSFML_BUILD_DOC=ON -DSFML_BUILD_WINDOW=OFF -DSFML_BUILD_GRAPHICS=OFF -DSFML_BUILD_AUDIO=OFF -DSFML_BUILD_NETWORK=OFF

  #   - name: Build Doxygen Site
  #     run: cmake --build build --target doc
