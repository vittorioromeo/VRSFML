#pragma once
#include <SFML/Copyright.hpp> // LICENSE AND COPYRIGHT (C) INFORMATION


////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "SFML/Graphics/Export.hpp"

#include "SFML/Window/WindowContext.hpp"

#include "SFML/Base/Optional.hpp"
#include "SFML/Base/PassKey.hpp"


////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////
namespace sf::priv
{
class GlContext;
} // namespace sf::priv


namespace sf
{
class RenderTarget;
class Shader;
class Texture;
} // namespace sf


namespace sf
{
////////////////////////////////////////////////////////////
/// \brief TODO P1: docs
///
////////////////////////////////////////////////////////////
class [[nodiscard]] SFML_GRAPHICS_API GraphicsContext : public WindowContext
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief Create a new graphics context TODO P1: docs
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] static base::Optional<GraphicsContext> create();

    ////////////////////////////////////////////////////////////
    /// \private
    ///
    /// \brief Default constructor
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] explicit GraphicsContext(base::PassKey<GraphicsContext>&&, WindowContext&& windowContext);

    ////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    ////////////////////////////////////////////////////////////
    ~GraphicsContext();

    // Deleted copy operations
    GraphicsContext(const GraphicsContext&)            = delete;
    GraphicsContext& operator=(const GraphicsContext&) = delete;

    ////////////////////////////////////////////////////////////
    /// \brief TODO P1: docs
    ///
    ////////////////////////////////////////////////////////////
    GraphicsContext(GraphicsContext&& rhs) noexcept;

    // Deleted move assignment
    GraphicsContext& operator=(GraphicsContext&& rhs) = delete;

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in shader
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] Shader& getBuiltInShader() const;

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in 1x1 white texture
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] Texture& getBuiltInWhiteDotTexture() const;

    ////////////////////////////////////////////////////////////
    /// \brief Returns `true` if a `GraphicsContext` is installed
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] static bool isInstalled();

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in vertex shader source code
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] static const char* getBuiltInShaderVertexSrc();

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in fragment shader source code
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] static const char* getBuiltInShaderFragmentSrc();

private:
    friend Shader;
    friend RenderTarget;

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in shader (private `static` version)
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] static Shader& getInstalledBuiltInShader();

    ////////////////////////////////////////////////////////////
    /// \brief Returns the built-in 1x1 white texture (private `static` version)
    ///
    ////////////////////////////////////////////////////////////
    [[nodiscard]] static Texture& getInstalledBuiltInWhiteDotTexture();
};

} // namespace sf


////////////////////////////////////////////////////////////
/// \class sf::GraphicsContext
/// \ingroup graphics
///
/// TODO P1: docs
///
/// \see sf::GraphicsContext
///
////////////////////////////////////////////////////////////
