#pragma once
// LICENSE AND COPYRIGHT (C) INFORMATION
// https://github.com/vittorioromeo/VRSFML/blob/master/license.md


#if __has_builtin(__is_integral)

    ////////////////////////////////////////////////////////////
    #define SFML_BASE_IS_INTEGRAL(...) __is_integral(__VA_ARGS__)

#else

namespace sf::base::priv
{
////////////////////////////////////////////////////////////
template <typename T>
inline constexpr bool isIntegralImpl = false;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<bool> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<char> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<signed char> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<unsigned char> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<wchar_t> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<char8_t> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<char16_t> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<char32_t> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<short> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<unsigned short> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<int> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<unsigned int> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<long> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<unsigned long> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<long long> = true;


////////////////////////////////////////////////////////////
template <>
inline constexpr bool isIntegralImpl<unsigned long long> = true;

} // namespace sf::base::priv

    ////////////////////////////////////////////////////////////
    #define SFML_BASE_IS_INTEGRAL(...) ::sf::base::priv::isIntegralImpl<__VA_ARGS__>

#endif


namespace sf::base
{
////////////////////////////////////////////////////////////
template <typename T>
inline constexpr bool isIntegral = SFML_BASE_IS_INTEGRAL(T);

} // namespace sf::base
