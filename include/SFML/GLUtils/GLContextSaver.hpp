#pragma once
#include <SFML/Copyright.hpp> // LICENSE AND COPYRIGHT (C) INFORMATION


////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////
namespace sf::priv
{
class GlContext;
} // namespace sf::priv


namespace sf::priv
{
////////////////////////////////////////////////////////////
/// \brief Automatic wrapper for saving and restoring the current GL context
///
////////////////////////////////////////////////////////////
class GLContextSaver
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief Default constructor
    ///
    /// The current GL context is saved.
    ///
    ////////////////////////////////////////////////////////////
    GLContextSaver();

    ////////////////////////////////////////////////////////////
    /// \brief Destructor
    ///
    /// The previous GL context is restored.
    ///
    ////////////////////////////////////////////////////////////
    ~GLContextSaver();

    ////////////////////////////////////////////////////////////
    GLContextSaver(const GLContextSaver&)            = delete;
    GLContextSaver& operator=(const GLContextSaver&) = delete;

    ////////////////////////////////////////////////////////////
    GLContextSaver(GLContextSaver&&)            = delete;
    GLContextSaver& operator=(GLContextSaver&&) = delete;

private:
    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    priv::GlContext* m_glContext; //!< GL context to restore
};

} // namespace sf::priv
